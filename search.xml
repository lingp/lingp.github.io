<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用uniapp遇到的问题</title>
      <link href="/2023/06/06/uniapp-problem/"/>
      <url>/2023/06/06/uniapp-problem/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="使用Uniapp遇到的问题和坑，版本：vue3，HbuilderX-3-8-4-20230531"><a href="#使用Uniapp遇到的问题和坑，版本：vue3，HbuilderX-3-8-4-20230531" class="headerlink" title="使用Uniapp遇到的问题和坑，版本：vue3，HbuilderX-3.8.4.20230531"></a>使用Uniapp遇到的问题和坑，版本：vue3，HbuilderX-3.8.4.20230531</h1><h2 id="1-字体文件引入不成功？"><a href="#1-字体文件引入不成功？" class="headerlink" title="1.字体文件引入不成功？"></a>1.字体文件引入不成功？</h2><p>参考链接：<a href="https://uniapp.dcloud.net.cn/tutorial/project.html">https://uniapp.dcloud.net.cn/tutorial/project.html</a><br>static:存放应用引用的本地静态资源（如图片、视频、图标字体文件等）的目录，<strong>注意：静态资源只能存放于此</strong></p><h2 id="2-使用nvue时，slot引入图标，在app不生效？"><a href="#2-使用nvue时，slot引入图标，在app不生效？" class="headerlink" title="2.使用nvue时，slot引入图标，在app不生效？"></a>2.使用nvue时，slot引入图标，在app不生效？</h2><p>在非App下slot正常使用，这种用法在app上不生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父：&lt;text class=&quot;iconfont&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/text&gt;</span><br><span class="line">子：&lt;IconButton&gt;&amp;#xe848;&lt;/IconButton&gt;</span><br></pre></td></tr></table></figure><p>在app上生效的方式，在子组件定义一个icon, 父组件传值进来’\ue848’，单引号不能缺失，注意如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父：&lt;text class=&quot;iconfont&quot;&gt;&#123;&#123;icon&#125;&#125;&lt;/text&gt;</span><br><span class="line">子：&lt;IconButton :icon=&quot;&#x27;\ue848&#x27;&quot;&gt;&lt;/IconButton&gt;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;flex flex-row align-center justify-center mr-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">IconButton</span> <span class="attr">:icon</span>=<span class="string">&quot;&#x27;\ue848&#x27;&quot;</span>&gt;</span><span class="symbol">&amp;#xe848;</span><span class="tag">&lt;/<span class="name">IconButton</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">IconButton</span> <span class="attr">:icon</span>=<span class="string">&quot;&#x27;\ue84f&#x27;&quot;</span>&gt;</span><span class="symbol">&amp;#xe84f;</span><span class="tag">&lt;/<span class="name">IconButton</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;flex align-center justify-center&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;bg-hover-light&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 80rpx; width: 80rpx;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #ifdef APP-PLUS-NVUE --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 50rpx;color: #000000;&quot;</span>&gt;</span>&#123;&#123;icon&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- #ifndef APP-PLUS-NVUE --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 50rpx;color: #000000;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #endif --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">icon</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-使用nvue时，slot在微信小程序不渲染的问题？"><a href="#2-使用nvue时，slot在微信小程序不渲染的问题？" class="headerlink" title="2.使用nvue时，slot在微信小程序不渲染的问题？"></a>2.使用nvue时，slot在微信小程序不渲染的问题？</h2><p>子组件定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">v-if</span>=<span class="string">&quot;isShowTitle&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有问题的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navBarVue</span> <span class="attr">:isShowTitle</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这样微信小程序不展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span>WeChat<span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">navBarVue</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navBarVue</span> <span class="attr">:isShowTitle</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里多加一个&lt;text&gt;&lt;/text&gt;不然小程序不渲染，真是奇怪 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>WeChat<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">navBarVue</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-微信小程序端不支持计算属性绑定对象给-class、style"><a href="#3-微信小程序端不支持计算属性绑定对象给-class、style" class="headerlink" title="3.微信小程序端不支持计算属性绑定对象给 class、style"></a>3.微信小程序端不支持计算属性绑定对象给 class、style</h2><p>这样是不行的，渲染后的元素节点显示 object。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;dictionary-picker&quot;&gt;</span><br><span class="line">    &lt;view :class=&quot;boxStyle&quot;&gt;&lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    boxStyle() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        active: this.activeTab ? true : false,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>解决方法：不通过计算属性，直接在属性上绑定逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;dictionary-picker&quot;&gt;</span><br><span class="line">    &lt;view :class=&quot;[activeTab ? &#x27;active&#x27; : &#x27;&#x27;]&quot;&gt;&lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础面试题</title>
      <link href="/2023/06/03/java-basic-interview-questions/"/>
      <url>/2023/06/03/java-basic-interview-questions/</url>
      
        <content type="html"><![CDATA[<p><em><strong>目前只整理我自己觉得比较常问的题，补充ing</strong></em><br>[toc]</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="1-Java有哪些数据类型？"><a href="#1-Java有哪些数据类型？" class="headerlink" title="1.Java有哪些数据类型？"></a>1.Java有哪些数据类型？</h3><p>Java数据类型分为两种：基本数据类型和引用数据类型</p><img src="/2023/06/03/java-basic-interview-questions/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" class=""><p>基本数据类型分为：</p><ol><li>数值型</li><li>整数类型（byte、short、int、long）</li><li>浮点类型（float、double）</li><li>字符型（char）</li><li>布尔型（boolean）</li></ol><p>Java 基本数据类型范围和默认值：</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>int</td><td>32</td><td>4</td><td>0</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>char</td><td>16</td><td>2</td><td>‘u0000’</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><p>引用数据类型：</p><ol><li>类（class）</li><li>接口（interface）</li><li>数组（[]）</li></ol><p><strong>注意：string不是基本的数据类型</strong></p><h3 id="2-switch-是否能作用在-byte-x2F-long-x2F-String-上？"><a href="#2-switch-是否能作用在-byte-x2F-long-x2F-String-上？" class="headerlink" title="2.switch 是否能作用在 byte&#x2F;long&#x2F;String 上？"></a>2.switch 是否能作用在 byte&#x2F;long&#x2F;String 上？</h3><p>Java5 以前 switch(expr)中，expr 只能是 byte、short、char、int。<br>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。<br>从 Java 7 开始，expr 还可以是字符串(String)，但是<strong>长整型(long)在目前所有的版本中都是不可以的</strong>。<br><em>ps: 好冷门的题。。。</em></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="final-关键字有什么作用？"><a href="#final-关键字有什么作用？" class="headerlink" title="final 关键字有什么作用？"></a>final 关键字有什么作用？</h3><p>final，表示不可变的意思，可用于修饰类、属性和方法</p><ol><li>被final修饰的类<strong>不可以被继承</strong></li><li>被final修饰的方法<strong>不可以被重写</strong></li><li>被final修饰的变量不可变，被final修饰的变量必须被<strong>显式地指定初始值</strong>，还得注意的是，<strong>这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变</strong>。</li></ol><h3 id="x3D-x3D-和-equals-的区别？"><a href="#x3D-x3D-和-equals-的区别？" class="headerlink" title="&#x3D;&#x3D;和 equals 的区别？"></a>&#x3D;&#x3D;和 equals 的区别？</h3><p>&#x3D;&#x3D;：作用是判断两个对象的<strong>地址</strong>是否相等。即判断两个对象是不是同一个对象，<strong>基本数据类型比较的是值，引用类型比较的是内存地址</strong></p><p>equals：</p><ol><li>默认情况下，类没有覆盖equals()方法，则通过equals比较该类的两个对象时，等价于通过“&#x3D;&#x3D;”比较这两个对象，即比较的是内存地址</li><li>自定义的情况：类覆盖equals()方法，<strong>一般是比较两个对象的内容是否相同</strong>，自定义了一个相等的标准，也就是两个对象的值是否相等</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Person)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(age, person.age) &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode 与 equals?"></a>hashCode 与 equals?</h3><p><em><strong>面试常问：你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？</strong></em></p><ol><li><p>什么是hashCode?<br> 1.1 hashCode()的作用是获取哈希码，即散列码，实际上它返回一个<strong>int整数</strong>，定义在Object类中，是一个<strong>本地方法</strong>，这个方法常用来<strong>将对象的内存地址转为整数</strong>后返回</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p> 1.2 哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对(key-value)，它的特点是：能根据“键”快速的映射到对应的“值”。这其中就利⽤到了哈希码！  </p><p> 1.3 例如：HashMap 怎么把 key 映射到对应的 value 上呢？用的就是<strong>哈希取余法</strong>，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。</p></li><li><p>为什么重写 equals 时必须重写 hashCode ⽅法？(参考：<a href="https://juejin.cn/post/7024410950841139207">https://juejin.cn/post/7024410950841139207</a>)<br> 如果两个对象相等，则hashcode一定也是相同的。<br> 但反之，两个对象有相同的hashcode值，它们也不一定相等。(hash碰撞)</p><ul><li><p>每当重写equals时，通常都需要重写hashCode方法，以维护hashCode方法的一般约定，即相等的对象必须具有相等的哈希码。（注意：这里来源于Object.equals的注释）</p> <img src="/2023/06/03/java-basic-interview-questions/Object-equals.png" class=""></li><li><p>例：Java中的String类，这个类在Java集合中用到很多，例如我们平时使用的HashMap&#x2F;Set等等集合，都是经常性的使用String类型去当作key来进行使用的。String重写了equals和hashcode</p><ul><li><p>如果String没有重写equals，也就是继承了Object类的equals方法的话，则如果String类型为key的时候，<strong>相同的字符串，也可能会被当成两个不一样的key</strong>，从而难以辨别。</p></li><li><p>如果String重写了equals，没有重写hashCode。那么也会出现，同一个key出现在不同的位置，因为集合中常用哈希函数来计算key的位置，在没有重写hashCode的情况下，则<strong>同一个key会出现hashCode值不同而导致位置不同</strong>。</p></li></ul></li></ul></li></ol><h3 id="深拷贝和浅拷贝？"><a href="#深拷贝和浅拷贝？" class="headerlink" title="深拷贝和浅拷贝？"></a>深拷贝和浅拷贝？</h3><ul><li>浅拷贝：仅拷贝被拷贝对象的成员变量的值，也就是<strong>基本数据类型变量的值</strong>，和<strong>引用数据类型变量的地址值</strong>，而对于引用类型变量指向的堆中的对象不会拷贝</li><li>深拷贝：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份</li></ul><p>深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。</p><p>举例：现在有个Order对象，成员变量，有个基本数据类型order_no，还有一个引用数据类型products</p><img src="/2023/06/03/java-basic-interview-questions/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D.png" class=""><blockquote><p>浅拷贝如何实现呢？</p></blockquote><p> Object 类提供的 clone()方法可以非常简单地实现对象的浅拷贝。</p><blockquote><p>深拷贝如何实现呢？</p></blockquote><ol><li>重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。</li><li>序列化：可以先将<strong>原对象序列化</strong>，再<strong>反序列化成拷贝对象</strong>。</li></ol><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="String和StringBuilder、StringBuffer的区别"><a href="#String和StringBuilder、StringBuffer的区别" class="headerlink" title="String和StringBuilder、StringBuffer的区别"></a>String和StringBuilder、StringBuffer的区别</h3><ul><li>String: String的值被创建后就不能修改，<strong>任何对String对象的修改都会引发新的String对象的生成</strong></li><li>StringBuffer：跟String类似，但是<strong>值可以被修改</strong>，则不生成新的对象，使用synchronized来保证线程安全</li><li>StringBuilder：StringBuffer的<strong>非线程安全版</strong>，性能上更高一些</li></ul><h3 id="String-str1-x3D-new-String-“abc”-和String-str2-x3D-”abc”的区别"><a href="#String-str1-x3D-new-String-“abc”-和String-str2-x3D-”abc”的区别" class="headerlink" title="String str1&#x3D;new String(“abc”)和String str2&#x3D;”abc”的区别"></a>String str1&#x3D;new String(“abc”)和String str2&#x3D;”abc”的区别</h3><p>两个语句都会去<strong>字符串常量池</strong>检查是否已经存在”abc”，若有则直接使用，无则在常量池创建”abc”对象<br>不同的是，new String(“abc”)还有在堆中创建一个”abc”的对象实例。</p><img src="/2023/06/03/java-basic-interview-questions/String-abc.png" class=""><h3 id="String是不可变类，字符串拼接是如何实现的？"><a href="#String是不可变类，字符串拼接是如何实现的？" class="headerlink" title="String是不可变类，字符串拼接是如何实现的？"></a>String是不可变类，字符串拼接是如何实现的？</h3><p>String使用“+”的拼接操作时，会生成新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;world!&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ab</span> <span class="operator">=</span> a + b;</span><br></pre></td></tr></table></figure><p>在<strong>JDK1.8之前</strong>，a和b初始化时位于字符串常量池，<strong>ab拼接后的对象位于堆中。如果拼接多次，就会生成多个中间对象</strong>。</p><img src="/2023/06/03/java-basic-interview-questions/String%E6%8B%BC%E6%8E%A5java8%E4%B9%8B%E5%89%8D.png" class=""><p>在<strong>JDK1.8之后</strong>，“+”的拼接方式会被优化为<strong>基于StringBuilder的append方法进行处理</strong>。Java会在编译期对“+”号处理。</p><img src="/2023/06/03/java-basic-interview-questions/String%E6%8B%BC%E6%8E%A5java8%E4%B9%8B%E5%90%8E.png" class=""><h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><h3 id="Integer-a-x3D-127-Integer-b-x3D-127-Integer-c-x3D-128-Integer-d-x3D-128-是否相等？"><a href="#Integer-a-x3D-127-Integer-b-x3D-127-Integer-c-x3D-128-Integer-d-x3D-128-是否相等？" class="headerlink" title="Integer a &#x3D; 127, Integer b &#x3D; 127; Integer c &#x3D; 128, Integer d &#x3D; 128; 是否相等？"></a>Integer a &#x3D; 127, Integer b &#x3D; 127; Integer c &#x3D; 128, Integer d &#x3D; 128; 是否相等？</h3><p>a &#x3D;&#x3D; b –&gt; true;<br>c &#x3D;&#x3D; d –&gt; false;<br>原因：整型字面量的值在-128到127之间，<strong>自动装箱时不会new新的Integer对象</strong>，而是<strong>直接引用缓存池中的Integer对象</strong>。<br>注意是自动装箱！！！直接new Integer(127)也是新对象，那&#x3D;&#x3D;就为false;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a == b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a == b1); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(c == d); <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现原理：int在自动装箱的时候会调用Integer.valueOf，进而用到了IntegerCache</p><img src="/2023/06/03/java-basic-interview-questions/Interger-cache.png" class=""><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="JAVA中IO流分为几种？"><a href="#JAVA中IO流分为几种？" class="headerlink" title="JAVA中IO流分为几种？"></a>JAVA中IO流分为几种？</h3><ul><li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong></li><li>按照操作单元分，可以分为<strong>字节流</strong>和<strong>字符流</strong></li><li>按照流的角色分，可以分为<strong>节点流</strong>和<strong>处理流</strong></li></ul><p>JAVA IO流共涉及40多个类，主要从以下4个抽象基类派生出来</p><ul><li>InputStream&#x2F;Reader：所有的输入流的基类，前者是字节输入流，后者是字符输入流</li><li>OutputStream&#x2F;Writer：所有输出流的基类，前者是字节输出流，后者是字符输出流</li></ul><p>ps：类比较多，后续整理下</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="什么是序列化？什么是反序列化？"><a href="#什么是序列化？什么是反序列化？" class="headerlink" title="什么是序列化？什么是反序列化？"></a>什么是序列化？什么是反序列化？</h3><p>序列化就是把Java对象转为二进制流，方便存储和传输<br>反序列化就是吧二进制流恢复成对象</p><ul><li>Java序列化不包括静态变量。</li><li>如果有些<strong>变量</strong>不想序列化，使用transient关键字修饰<br>transient只能修饰变量，不能修饰类和方法</li></ul><h3 id="Serializable-有什么作用？"><a href="#Serializable-有什么作用？" class="headerlink" title="Serializable 有什么作用？"></a>Serializable 有什么作用？</h3><p>这个接口只是一个标记，没有具体作用，若不实现该接口，在某些序列化场景会失败</p><h3 id="serialVersionUID有什么作用？"><a href="#serialVersionUID有什么作用？" class="headerlink" title="serialVersionUID有什么作用？"></a>serialVersionUID有什么作用？</h3><p>serialVersionUID起验证作用</p><blockquote><p>private static final long serialVersionUID &#x3D; 1L;</p></blockquote><p>该ID其实就是用来验证序列化的对象和反序列化对象的对应ID是否一致<br>如果没有显示制定，编译器会根据类的相关信息自动生成一个<br><strong>注意：如果没有显示定义，在序列化一个对象后，在反序列化之前把类的结构改了，就会序列化失败</strong>，因为类变了，serialVersionUID就不一致了。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="什么是泛型？"><a href="#什么是泛型？" class="headerlink" title="什么是泛型？"></a>什么是泛型？</h3><p>参考：<a href="https://www.cnblogs.com/54chensongxia/p/12470672.html">https://www.cnblogs.com/54chensongxia/p/12470672.html</a></p><p>泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。</p><p>泛型的本质是<strong>参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数。</p><p>使用方式：泛型类、泛型接口、泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"><span class="keyword">interface</span>  <span class="title class_">ITest</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这几个都可以用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>&lt;String&gt; <span class="keyword">implements</span> <span class="title class_">ITest</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String) <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>&lt;String&gt; <span class="keyword">implements</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String) <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test3</span> <span class="keyword">implements</span> <span class="title class_">ITest</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String) <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println((<span class="keyword">new</span> <span class="title class_">Test1</span>()).test());</span><br><span class="line">System.out.println((<span class="keyword">new</span> <span class="title class_">Test2</span>()).test());</span><br><span class="line">System.out.println((<span class="keyword">new</span> <span class="title class_">Test3</span>()).test());</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test4</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test4</span><span class="params">(T k)</span> &#123;</span><br><span class="line">        i = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println((<span class="keyword">new</span> <span class="title class_">Test4</span>&lt;String&gt;(<span class="string">&quot;hello world4&quot;</span>)).test())</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span>  <span class="title function_">printArray</span><span class="params">(E[] inputArr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> ( E element : inputArr )&#123;</span><br><span class="line">            System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; E <span class="title function_">test</span><span class="params">(E i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Test5</span> <span class="variable">test5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test5</span>();</span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">test5.printArray(intArray);</span><br><span class="line">Character[] charArray = &#123; <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span> &#125;;</span><br><span class="line">test5.printArray(charArray);</span><br><span class="line"></span><br><span class="line">System.out.println(test5.test(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">System.out.println(test5.test(<span class="number">123</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型擦除是什么"><a href="#泛型擦除是什么" class="headerlink" title="泛型擦除是什么"></a>泛型擦除是什么</h3><p>泛型擦除：是指Java中的泛型只在编译期有效，<strong>在运行期间会被删除</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 会报重载错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(List&lt;String&gt; stringList)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(List&lt;Integer&gt; intList)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的代码会报重载错误，原因是：上面两个方法的参数是泛型参数，编译后会被泛型擦除，两个方法最后都是public void test(List stringList)，所以报重载错误。</p><p>在编译器编译后，泛型的转换规则如下：</p><ul><li>List、List 擦除后的类型为 List；</li><li>List[]、List[] 擦除后的类型为 List[];</li><li>List&lt;? extends E&gt;、List&lt;? super E&gt; 擦除后的类型为 List;</li><li>List&lt;T extends Serialzable &amp; Cloneable&gt; 擦除后类型为 List。</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h3><p>反射就是Reflection，Java的反射是指程序在<strong>运行期</strong>可以拿到一个对象的所有信息。<br>原理：Java程序的执行分为编译和运行两步，<strong>编译后会生成字节码(.class)文件</strong>，JVM进行类加载的时候，会加载字节码文件，<strong>将类型相关的所有信息加载进方法区</strong>，反射就是去获取这些信息，然后进行操作，</p><h2 id="集合-List-Map-Set"><a href="#集合-List-Map-Set" class="headerlink" title="集合(List, Map, Set)"></a>集合(List, Map, Set)</h2><h3 id="ArrayList的扩容机制"><a href="#ArrayList的扩容机制" class="headerlink" title="ArrayList的扩容机制"></a>ArrayList的扩容机制</h3><p>ArrayList是基于数组的集合，在定义时大小是确定的，当容量超过数组长度就会触发扩容。<br>ArrayList的扩容是<strong>创建一个1.5倍的新数组</strong>，然后把原数组的值拷贝过去。</p><h3 id="ArrayList如何序列化？为什么要用transient修饰数组？"><a href="#ArrayList如何序列化？为什么要用transient修饰数组？" class="headerlink" title="ArrayList如何序列化？为什么要用transient修饰数组？"></a>ArrayList如何序列化？为什么要用transient修饰数组？</h3><p>ArrayList的序列化是通过<strong>readObject</strong>、<strong>writeObject</strong>自定义序列化和反序列化策略，实际直接使用两个流<strong>ObjectOutputStream</strong>和<strong>ObjectInputStream</strong>来进行序列化和反序列化。</p><img src="/2023/06/03/java-basic-interview-questions/ArrayList-readObject-writeObject.png" class=""><p>元素数组elementData使用<strong>transient</strong>修饰，这样序列化的时候不会直接序列化元素数组，这是出于效率的考虑，数组可能长度100，但实际只用了50，剩下的50可以不用序列化，所以通过自定义的<strong>readObject</strong>、<strong>writeObject</strong>提高了序列化和反序列化的效率，同时节省内存空间</p><img src="/2023/06/03/java-basic-interview-questions/arraylist-transient-elementData.png" class=""><h3 id="CopyOnWriteArrayList原理"><a href="#CopyOnWriteArrayList原理" class="headerlink" title="CopyOnWriteArrayList原理"></a>CopyOnWriteArrayList原理</h3><p>线程安全版本的ArrayList<br>原理：CopyOnWriteArrayList主要采用<strong>读写分离</strong>的并发策略，允许<strong>并发读</strong>，<strong>读操作时无锁的</strong>，性能较高。写操作时，首先<strong>将当前容器复制一份</strong>，然后在<strong>新副本</strong>上执行写操作(加锁写)，完成后<strong>将原容器的引用指向新容器</strong>。</p><img src="/2023/06/03/java-basic-interview-questions/CopyOnWriteArrayList.png" class="">]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2023/06/02/my-blog-build-remark/"/>
      <url>/2023/06/02/my-blog-build-remark/</url>
      
        <content type="html"><![CDATA[<p>hello world</p><img src="/2023/06/02/my-blog-build-remark/view_photo.png" class="">]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> fluid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 GitHub Pages + Hexo 搭建个人博客</title>
      <link href="/2023/06/02/hexo-and-github-pages/"/>
      <url>/2023/06/02/hexo-and-github-pages/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h3 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一 准备工作"></a>一 准备工作</h3><ol><li>注册Github</li><li>安装git</li><li>安装NodeJS</li></ol><h3 id="二-创建仓库"><a href="#二-创建仓库" class="headerlink" title="二 创建仓库"></a>二 创建仓库</h3><ol><li>进入仓库<img src="/2023/06/02/hexo-and-github-pages/into_repositories.png" class=""></li><li>点击 “NEW” 创建仓库<img src="/2023/06/02/hexo-and-github-pages/new_repositories.png" class=""></li><li>创建仓库，<strong>注意:</strong> 格式必须为&lt;用户名&gt;.github.io，ps:截图里的 lingpx 是因为我已经创建过仓库了，加个x演示下成功的状态<img src="/2023/06/02/hexo-and-github-pages/create_repositories.png" class=""></li><li>点击creating a new file 创建新文件，作为网站的主页<img src="/2023/06/02/hexo-and-github-pages/new_file.png" class=""></li><li>新文件的名字必须为index.html，填写后提交<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>访问主页链接 <a href="https://lingp.github.io/">https://lingp.github.io/</a>，访问的地址就是 <strong>https:&#x2F;&#x2F;用户名.github.io</strong> ，以下可以看到自己的主页链接<img src="/2023/06/02/hexo-and-github-pages/site.png" class=""></li></ol><h3 id="三-安装Hexo"><a href="#三-安装Hexo" class="headerlink" title="三 安装Hexo"></a>三 安装Hexo</h3><p>官网地址：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><ol><li><p>安装</p><blockquote><p>npm install hexo-cli -g</p></blockquote></li><li><p>查看版本</p><blockquote><p>hexo -v</p></blockquote></li><li><p>创建项目</p><blockquote><p>hexo init hexo-blog<br>cd hexo-blog<br>npm install</p></blockquote></li><li><p>本地启动</p><blockquote><p>hexo g<br>hexo server<br>或者简写<br>hexo g &amp; s</p></blockquote></li><li><p>访问本地链接 <a href="http://localhost:4000/">http://localhost:4000</a></p></li></ol><h3 id="四-更换主题"><a href="#四-更换主题" class="headerlink" title="四 更换主题"></a>四 更换主题</h3><p>官网主题地址：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>我这边选用的是”3-hexo”主题，可以根据自己喜欢的主题更换<br>主题地址：<a href="https://github.com/yelog/hexo-theme-3-hexo">https://github.com/yelog/hexo-theme-3-hexo</a><br><strong>3-hexo使用说明</strong>: <a href="https://yelog.org/2017/03/23/3-hexo-instruction/">https://yelog.org/2017/03/23/3-hexo-instruction/</a></p><img src="/2023/06/02/hexo-and-github-pages/theme.png" class=""><p>安装介绍</p><blockquote><p>git clone <a href="https://github.com/yelog/hexo-theme-3-hexo.git">https://github.com/yelog/hexo-theme-3-hexo.git</a> themes&#x2F;3-hexo</p></blockquote><blockquote><p>可以把<strong>themes&#x2F;3-hexo</strong>下的_config.yml，复制到hexo-blog <em><strong>根目录</strong></em>下并改名_config.3-hexo.yml，后续个性化可以改这个文件，当然也可以直接改themes&#x2F;3-hexo下的_config.yml</p></blockquote><blockquote><p>修改hexo-blog <em><strong>根目录</strong></em> 的_config.yml，如下<br>theme: 3-hexo</p></blockquote><blockquote><p>本地启动：hexo g -d &amp; hexo s</p></blockquote><h3 id="五-创建文章"><a href="#五-创建文章" class="headerlink" title="五 创建文章"></a>五 创建文章</h3><p>修改hexo-blog <em><strong>根目录</strong></em> 的_config.yml的配置，该配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件，如下</p><blockquote><p>post_asset_folder: true</p></blockquote><p>执行如下命令创建新文章</p><blockquote><p>hexo new post test_article</p></blockquote><p>引入图片，参考:<a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img test_show.png %&#125;</span><br></pre></td></tr></table></figure><img src="/2023/06/02/hexo-and-github-pages/test_show.png" class=""><p>效果图：</p><img src="/2023/06/02/hexo-and-github-pages/res-show.png" class=""><h3 id="六-个性化"><a href="#六-个性化" class="headerlink" title="六 个性化"></a>六 个性化</h3><p>参考：<strong>3-hexo使用说明</strong>: <a href="https://yelog.org/2017/03/23/3-hexo-instruction/">https://yelog.org/2017/03/23/3-hexo-instruction/</a></p><h3 id="七-发布到GitHub-Pages"><a href="#七-发布到GitHub-Pages" class="headerlink" title="七 发布到GitHub Pages"></a>七 发布到GitHub Pages</h3><p>方式一<br>安装hexo-deployer-git</p><blockquote><p>npm install hexo-deployer-git</p></blockquote><blockquote><p>修改<strong>根目录</strong>下的_config.yml的配置<br>deploy:<br>  type: git<br>  repo: <a href="https://github.com/lingp/lingp.github.io.git">https://github.com/lingp/lingp.github.io.git</a><br>  branch: master<br>  token: xxx</p></blockquote><p>token的获取方式</p><ol><li>进入setting页面<img src="/2023/06/02/hexo-and-github-pages/token_setting_first.png" class=""></li><li>右下角<img src="/2023/06/02/hexo-and-github-pages/token_setting_second.png" class=""></li><li>创建token<img src="/2023/06/02/hexo-and-github-pages/token_setting_third.png" class=""></li><li>复制token<img src="/2023/06/02/hexo-and-github-pages/token_setting_four.png" class=""></li></ol><p>部署到Github</p><blockquote><p>hexo g -d</p></blockquote><p>方式二</p><p>直接将public目录中的文件和目录推到至GitHub仓库和分支</p><img src="/2023/06/02/hexo-and-github-pages/push.png" class=""><hr><p>参考：</p><ol><li>hexo官网：<a href="https://hexo.io/zh-cn">https://hexo.io/zh-cn</a></li><li>hexo主题：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></li><li>搭建教程：<a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></li><li>GitHub Pages：<a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages">https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> fluid </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
